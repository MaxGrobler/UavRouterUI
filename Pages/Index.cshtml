@page
@model UavRouteUI.Pages.IndexModel
@{
    ViewData["Title"] = "Low Risk Routing";
}

<!-- leaflet map link-->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />

<div id="map"></div>

<!-- UI stuff-->
<div class="main-content">
    <!-- UI left column - UAV cards-->
    <div class="uav-column">
        <h3>UAVs</h3>
        @foreach (var uav in Model.Uavs)
        {
            <div class="uav-card">
                <h5>@uav.Name</h5>
                <p>Make: @uav.Make</p>
                <p>Model: @uav.Model</p>
            </div>
        }

        <button class="add-drone-btn">+ Add Drone</button>
    </div>

    <!-- right column - route info-->
    <div class="route-column">
        <h3>Route Information</h3>
        <p><strong>Distance:</strong></p>
        <p><strong>Airspeed:</strong></p>
        <p><strong>Flight Time:</strong></p>
        <p><strong>Safety Index:</strong></p>

        <div class="route-result">
            <p>Select a drone and plot a route to begin.</p>
        </div>
    </div>
</div>

<!-- leaflet JS link -->
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<!-- Initialise leaflet map -->
<script>
    // Initialise map centered on Bath
    // Where is my laptop? can i use that for this?
    const map = L.map('map').setView([51.3781, -2.3597], 14);

    // Add dark base map tiles
    L.tileLayer('https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png', {
        maxZoom: 19,
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors & Stadia Maps'
    }).addTo(map);

    // Array to store marker coordinates (LatLng objects)
    const routePoints = [];

    // Polyline for connecting route markers
    let routeLine = null;

    // Function: handles double-click events
    function onMapDblClick(e) {
        const latlng = e.latlng;

        // Add marker at clicked location
        L.marker(latlng)
            .addTo(map)
            .bindPopup(`Waypoint ${routePoints.length + 1}`)
            .openPopup();

        // Store point in array
        routePoints.push(latlng);

        // Remove old polyline (if it exists)
        if (routeLine) {
            map.removeLayer(routeLine);
        }

        // Draw a new polyline connecting all markers
        routeLine = L.polyline(routePoints, { color: 'cyan', weight: 3 }).addTo(map);
    }

    // Attach the double-click event (⚠️ don't call the function immediately)
    map.on('dblclick', onMapDblClick);
</script>