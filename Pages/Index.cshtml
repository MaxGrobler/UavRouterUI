@page
@model UavRouteUI.Pages.IndexModel
@{
    ViewData["Title"] = "Low Risk Routing";
}

<!-- leaflet map link-->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />

<div id="map"></div>

<!-- UI stuff-->
<div class="main-content">
    <!-- UI left column - UAV cards-->
    <div class="uav-column">
        <h3>UAVs</h3>
        @foreach (var uav in Model.Uavs)
        {
            <div class="uav-card">
                <h5>@uav.Name</h5>
                <p>Make: @uav.Make</p>
                <p>Model: @uav.Model</p>
            </div>
        }

        <button class="add-drone-btn">+ Add Drone</button>
    </div>

    <!-- right column - route info-->
    <div class="route-column">
        <h3>Route Information</h3>
        <p><strong>Distance:</strong></p>
        <p><strong>Airspeed:</strong></p>
        <p><strong>Flight Time:</strong></p>
        <p><strong>Safety Index:</strong></p>

        <div class="route-result">
            <p>Select a drone and plot a route to begin.</p>
        </div>
        <button onclick="PushWaypoints()" class="routeButton" id="routeButton" disabled>
            plan route
        </button>
    </div>
</div>

<!-- leaflet JS link -->
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<!-- Initialise leaflet map -->
<script>
    // Initialise map centered on Bath
    // Where is my laptop? can i use that for this?
    const map = L.map('map', { doubleClickZoom: false }).setView([51.3781, -2.3597], 14);

    // Add dark base map tiles
    L.tileLayer('https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png', {
        maxZoom: 19,
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors & Stadia Maps'
    }).addTo(map);

    class WayPoint {
        constructor(latitude, longitude, altitudeMeters, routeId = 0, waypointId = 0) {
            this.latitude = latitude;
            this.longitude = longitude;
            this.altitudeMeters = altitudeMeters;
            this.routeId = routeId;
            this.waypointId = waypointId;
        }
    }

    // Array to store marker coordinates (LatLng objects)
    const routePoints = [];

    let routeLine = null;

    function arrayCheck() {
        // Enable the route button when there are at least 2 waypoints
        const routeButton = document.getElementById("routeButton");
        if (routePoints.length >= 2) {
            routeButton.disabled = false;
        } else {
            routeButton.disabled = true;
        }
    }

    function onMapDblClick(e) {
        // Get lat/lon of double-clicked position
        const lat = e.latlng.lat;
        const lon = e.latlng.lng;
        modifyMap(lat, lon);
    }

    function modifyMap(lat, lon) {
        // Create new waypoint
        const alt = 2000.0;

        const thisWaypoint = new WayPoint(lat, lon, alt);
        routePoints.push(thisWaypoint);

        // Add marker to map
        L.marker([lat, lon])
            .addTo(map)
            .bindPopup(`Waypoint ${routePoints.length}`)
            .openPopup();

        // Remove old route line if it exists
        if (routeLine) map.removeLayer(routeLine);

        // Generate new route line from current waypoints
        const coords = routePoints.map(p => [p.latitude, p.longitude]);
        console.log("coords:", coords);

        if (coords.length >= 2) {
            routeLine = L.polyline(coords, { color: 'cyan', weight: 3 }).addTo(map);
        }

        // Check whether the plan button should be enabled
        arrayCheck();
    }

    // Attach the double-click event 
    map.on('dblclick', onMapDblClick);

    async function PushWaypoints() {
        console.log("Im calling PushWaypoints function");
        console.log("Sending these waypoints:", routePoints);
        const myjsonstring = JSON.stringify(routePoints); // serializing the array
        console.log("Sending these waypoints as JSON:", myjsonstring);

        // Send the waypoints to backend for route planning
        const response = await fetch('http://localhost:5188/api/UavRoute/PlanRoute', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(routePoints)
        });

        // Parse the edited points returned by backend
        const editedPoints = await response.json();
        console.log("Edited waypoints from backend:", editedPoints);

        // Add markers for each edited waypoint returned by backend
        for (const w of editedPoints) {
            const lat = w.latitude;
            const lon = w.longitude;
            modifyMap(lat, lon);
        }
    }
</script>